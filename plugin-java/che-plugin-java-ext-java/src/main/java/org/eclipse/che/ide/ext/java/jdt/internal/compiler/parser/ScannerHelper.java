/*******************************************************************************
 * Copyright (c) 2005, 2011 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *     David Foerster - patch for toUpperCase as described in https://bugs.eclipse.org/bugs/show_bug.cgi?id=153125
 *******************************************************************************/
package org.eclipse.che.ide.ext.java.jdt.internal.compiler.parser;

import org.eclipse.che.ide.ext.java.jdt.core.compiler.InvalidInputException;
import org.eclipse.che.ide.ext.java.jdt.core.util.CharUtil;
import org.eclipse.che.ide.ext.java.jdt.core.util.JSONUtil;
import org.eclipse.che.ide.ext.java.jdt.internal.compiler.ast.ASTNode;
import com.google.gwt.core.client.JavaScriptObject;
import com.google.gwt.json.client.JSONObject;


public class ScannerHelper {

//    protected interface TablesResources extends ClientBundle {
//        @Source("Table.txt")
//        TextResource table();
//    }

    public final static long[] Bits = {ASTNode.Bit1, ASTNode.Bit2, ASTNode.Bit3, ASTNode.Bit4, ASTNode.Bit5,
                                       ASTNode.Bit6, ASTNode.Bit7, ASTNode.Bit8, ASTNode.Bit9, ASTNode.Bit10, ASTNode.Bit11, ASTNode.Bit12,
                                       ASTNode.Bit13, ASTNode.Bit14, ASTNode.Bit15, ASTNode.Bit16, ASTNode.Bit17, ASTNode.Bit18,
                                       ASTNode.Bit19,
                                       ASTNode.Bit20, ASTNode.Bit21, ASTNode.Bit22, ASTNode.Bit23, ASTNode.Bit24, ASTNode.Bit25,
                                       ASTNode.Bit26,
                                       ASTNode.Bit27, ASTNode.Bit28, ASTNode.Bit29, ASTNode.Bit30, ASTNode.Bit31, ASTNode.Bit32,
                                       ASTNode.Bit33L,
                                       ASTNode.Bit34L, ASTNode.Bit35L, ASTNode.Bit36L, ASTNode.Bit37L, ASTNode.Bit38L, ASTNode.Bit39L,
                                       ASTNode.Bit40L,
                                       ASTNode.Bit41L, ASTNode.Bit42L, ASTNode.Bit43L, ASTNode.Bit44L, ASTNode.Bit45L, ASTNode.Bit46L,
                                       ASTNode.Bit47L,
                                       ASTNode.Bit48L, ASTNode.Bit49L, ASTNode.Bit50L, ASTNode.Bit51L, ASTNode.Bit52L, ASTNode.Bit53L,
                                       ASTNode.Bit54L,
                                       ASTNode.Bit55L, ASTNode.Bit56L, ASTNode.Bit57L, ASTNode.Bit58L, ASTNode.Bit59L, ASTNode.Bit60L,
                                       ASTNode.Bit61L,
                                       ASTNode.Bit62L, ASTNode.Bit63L, ASTNode.Bit64L,};

    private static final int START_INDEX = 0;

    private static final int PART_INDEX = 1;

    private static long[][][] Tables;

    public final static int MAX_OBVIOUS = 128;

    public final static int[] OBVIOUS_IDENT_CHAR_NATURES = new int[MAX_OBVIOUS];

    public final static int C_JLS_SPACE = ASTNode.Bit9;

    public final static int C_SPECIAL = ASTNode.Bit8;

    public final static int C_IDENT_START = ASTNode.Bit7;

    public final static int C_UPPER_LETTER = ASTNode.Bit6;

    public final static int C_LOWER_LETTER = ASTNode.Bit5;

    public final static int C_IDENT_PART = ASTNode.Bit4;

    public final static int C_DIGIT = ASTNode.Bit3;

    public final static int C_SEPARATOR = ASTNode.Bit2;

    public final static int C_SPACE = ASTNode.Bit1;

    static {
        OBVIOUS_IDENT_CHAR_NATURES[0] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[1] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[2] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[3] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[4] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[5] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[6] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[7] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[8] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[14] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[15] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[16] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[17] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[18] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[19] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[20] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[21] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[22] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[23] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[24] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[25] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[26] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[27] = C_IDENT_PART;
        OBVIOUS_IDENT_CHAR_NATURES[127] = C_IDENT_PART;

        for (int i = '0'; i <= '9'; i++)
            OBVIOUS_IDENT_CHAR_NATURES[i] = C_DIGIT | C_IDENT_PART;

        for (int i = 'a'; i <= 'z'; i++)
            OBVIOUS_IDENT_CHAR_NATURES[i] = C_LOWER_LETTER | C_IDENT_PART | C_IDENT_START;
        for (int i = 'A'; i <= 'Z'; i++)
            OBVIOUS_IDENT_CHAR_NATURES[i] = C_UPPER_LETTER | C_IDENT_PART | C_IDENT_START;

        OBVIOUS_IDENT_CHAR_NATURES['_'] = C_SPECIAL | C_IDENT_PART | C_IDENT_START;
        OBVIOUS_IDENT_CHAR_NATURES['$'] = C_SPECIAL | C_IDENT_PART | C_IDENT_START;

        OBVIOUS_IDENT_CHAR_NATURES[9] = C_SPACE | C_JLS_SPACE; // \ u0009: HORIZONTAL TABULATION
        OBVIOUS_IDENT_CHAR_NATURES[10] = C_SPACE | C_JLS_SPACE; // \ u000a: LINE FEED
        OBVIOUS_IDENT_CHAR_NATURES[11] = C_SPACE;
        OBVIOUS_IDENT_CHAR_NATURES[12] = C_SPACE | C_JLS_SPACE; // \ u000c: FORM FEED
        OBVIOUS_IDENT_CHAR_NATURES[13] = C_SPACE | C_JLS_SPACE; // \ u000d: CARRIAGE RETURN
        OBVIOUS_IDENT_CHAR_NATURES[28] = C_SPACE;
        OBVIOUS_IDENT_CHAR_NATURES[29] = C_SPACE;
        OBVIOUS_IDENT_CHAR_NATURES[30] = C_SPACE;
        OBVIOUS_IDENT_CHAR_NATURES[31] = C_SPACE;
        OBVIOUS_IDENT_CHAR_NATURES[32] = C_SPACE | C_JLS_SPACE; // \ u0020: SPACE

        OBVIOUS_IDENT_CHAR_NATURES['.'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES[':'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES[';'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES[','] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['['] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES[']'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['('] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES[')'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['{'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['}'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['+'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['-'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['*'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['/'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['='] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['&'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['|'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['?'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['<'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['>'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['!'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['%'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['^'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['~'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['"'] = C_SEPARATOR;
        OBVIOUS_IDENT_CHAR_NATURES['\''] = C_SEPARATOR;
    }

    private static native JavaScriptObject getTable() /*-{
        return {"part0":[287948970162897407,-8646911290859585538,297277419818057727,-36028797027352577,-1,-1,-1,-1,-1,-65533,-1,70501888425923,-1,288511851128422399,-17179879616,-18014398509514753,-1,-1,-901,288230376151678975,-562949953355777,-8547991553,-4899916394579230465,1979120929931446,576460743717619727,-65972845150209,-1,-6917531227739127809,-32768,70368744171519,1125899906842623,0,0,0,0,0,-864691128455135234,2306124278017245183,-881018876128026642,4503392135182751,-3211631683292264466,9006925953907079,-869759877059461138,844214476815295,-869759877059600402,844165902514575,-4323518207764871188,144396388183064007,-4327961440926441490,281212990012895,-869196927105900564,281214063754719,-4323457841299070996,281212992110031,3457638613854978028,3377704004977791,-8646911284551352322,67076095,4323434403644581270,872365919,-4422530440275951615,-554153860399361,2305843009196855263,64,272457864671395839,67044351,-4294967296,1729382256910204991,-1,-2080374785,-1065151889409,288230376151711743,-1,-3263218177,9168765891372858879,-8388803,-12713985,1123703165288447,-4294901761,9007199254740991,-2,-1,-1,-1,-1,-1,-1,-1,-1,35923243902697471,-4160749570,501377302265855,9007194961862655,3905461007941631,-1,4394700505087,-4227909632,72057594037927935,4398046511103,0,1152657618058084351,8796093022207936,-277076930199553,67044351,268435455,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,15,-1,-1,-4026531841,288230376151711743,-3233808385,4611686017001275199,6908521828386340863,2295745090394464220,-9223235697412870144,-9222531945545596927,18014394216546304,17463873830912,-865890351000322940,-4294966304,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-140737488355329,2147483647,-1,137438953471,-281200098803713,141012366262271,9187201948305063935,2139062143,0,0,0,0,0,0,0,0,2251518330118602976,-2,-4722786305,-1,-527765581332512,-1,72057589742993407,-281474976710656,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18014398509481983,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1152921504606846975,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8191,0,0,0,0,0,0,0,0,0,0,0,0,0,1099511627775,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,68719476735,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-211106232532993,-272678883688449,-1,67108863,6881498031078244479,-37,1125899906842623,-524288,-1,-1,-1,-1,4611686018427387903,-65536,-196609,2305561534236983551,6755463865630719,-9286475208138752,-1,-6917529027641081857,-8646911293074243568,-137304735746,9223372036854775807,1008806742219095292],
            "part1":[-4611686568183201793,1073692671,-1,576460752303423487,0,9007199254740991,0,0,0,0,0,0,-281472829227009,2047,-3221225473,4128527,-1,-1,4394825285631,0,0,0,0,0,0,0,0,0,0,0,0,0,-7944349742681555649,0,0,0,0,0,0,0,-8714465278979739537,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-30923764531200,65970697670631,0,0,28,0,0,0,0,0,0,-1,-2097153,-1441188830899077121,-17,8935141660164089791,-132001,-1,-1,-1,-1,-824633720833,-576460752437641219,-9007199256838145,-140737488388097,-2199023256065,-15369,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            "part
            "part14" : [-3221225473,-1,0,0,-1,-1,-1,281474976710655,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            "start0" : [68719476736,576460745995190270,297242231151001600,-36028797027352577,-1,-1,-1,-1,-1,-65533,-1,70501888425923,0,288230376151711744,-17179879616,-18014398509514753,-1,-1,-1021,288230376151678975,-562949953355777,-8547991553,255,1979120929931264,576460743713490944,-351843720886273,-1,-7205547885240254465,281474976514048,70368744169472,563224831328255,0,0,0,0,0,2594073385365405680,2305843026376851456,2577745637692514272,4222140488368128,247132830528276448,7881300924956672,2589004636761079776,562962838388736,2589004636760940512,562965791113216,288167810662516712,144115188075855872,283724577500946400,12884901888,2589567586714640352,13958643712,288228177128316896,12884901888,3457638613854978016,127,-9219431387180826626,127,2309762420256548246,805306463,1,8796093021951,3840,0,7679401525247,4128768,-4294967296,1729382256910204991,-1,-2080374785,-1065151889409,288230376151711743,-1,-3263218177,9168765891372858879,-8388803,-12713985,134217727,-4294901761,9007199254740991,-2,-1,-1,-1,-1,-1,-1,-1,-1,35923243902697471,-4160749570,501377302265855,1125895612129279,527761286627327,4503599627370495,411041792,-4294967296,72057594037927935,2199023255551,0,536870911,8796093022142464,4398046511103,254,8388607,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,0,-1,-1,-4026531841,288230376151711743,-3233808385,4611686017001275199,6908521828386340863,2295745090394464220,-9223372036854775808,-9222809086900305919,18014394216546304,0,-865890351000322940,-4294966304,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-140737488355329,2147483647,-1,137438953471,-281200098803713,141012366262271,9187201948305063935,2139062143,0,0,0,0,0,0,0,0,2251241253188403424,-2,-4823449601,-1,-527765581332512,-1,72057589742993407,-281474976710656,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,18014398509481983,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1152921504606846975,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8191,0,0,0,0,0,0,0,0,0,0,0,0,0,34359736251,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,68719476735,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-1,-1,-1,-211106232532993,-272678883688449,-1,67108863,6881498030004502655,-37,1125899906842623,-524288,-1,-1,-1,-1,4611686018427387903,-65536,-196609,2305561534236983551,6755399441055744,-9286475208138752,-1,2305843009213693951,-8646911293141286896,-137304735746,9223372036854775807,425688104188],
            "start1" : [-5188147320486625281,1073692671,-1,576460752303423487,0,9007199254740991,0,0,0,0,0,0,-281472829227009,2047,-3221225473,4128527,-1,-1,1073741823,0,0,0,0,0,0,0,0,0,0,0,0,0,-7944349742681555649,0,0,0,0,0,0,0,4503599609479169,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,-2097153,-1441188830899077121,-17,8935141660164089791,-132001,-1,-1,-1,-1,-824633720833,-576460752437641219,-9007199256838145,-140737488388097,-2199023256065,1015,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            "start
        }
    }-*/;

    static void initializeTable() {
        Tables = new long[2][][];
        Tables[START_INDEX] = new long[3][];
        Tables[PART_INDEX] = new long[4][];
//        TablesResources res = GWT.create(TablesResources.class);

//        JSONObject tables = JSONParser.parseLenient(res.table().getText()).isObject();
        JSONObject tables = new JSONObject(getTable());

        Tables[START_INDEX][0] = JSONUtil.jsonArrayToLongArray(tables.get("start0").isArray());

        Tables[START_INDEX][1] = JSONUtil.jsonArrayToLongArray(tables.get("start1").isArray());

        Tables[START_INDEX][2] = JSONUtil.jsonArrayToLongArray(tables.get("start2").isArray());

        Tables[PART_INDEX][0] = JSONUtil.jsonArrayToLongArray(tables.get("part0").isArray());

        Tables[PART_INDEX][1] = JSONUtil.jsonArrayToLongArray(tables.get("part1").isArray());

        Tables[PART_INDEX][2] = JSONUtil.jsonArrayToLongArray(tables.get("part2").isArray());

        Tables[PART_INDEX][3] = JSONUtil.jsonArrayToLongArray(tables.get("part14").isArray());

    }

    // static void initializeTable17() {
    // Tables7 = new long[2][][];
    // Tables7[START_INDEX] = new long[3][];
    // Tables7[PART_INDEX] = new long[4][];
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/start0.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[START_INDEX][0] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/start1.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[START_INDEX][1] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/start2.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[START_INDEX][2] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/part0.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[PART_INDEX][0] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/part1.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[PART_INDEX][1] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/part2.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[PART_INDEX][2] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // try {
    //      DataInputStream inputStream = new DataInputStream(new BufferedInputStream(ScannerHelper.class.getResourceAsStream
    // ("unicode6/part14.rsc"))); //$NON-NLS-1$
    // long[] readValues = new long[1024];
    // for (int i = 0; i < 1024; i++) {
    // readValues[i] = inputStream.readLong();
    // }
    // inputStream.close();
    // Tables7[PART_INDEX][3] = readValues;
    // } catch (FileNotFoundException e) {
    // e.printStackTrace();
    // } catch (IOException e) {
    // e.printStackTrace();
    // }
    // }
    private final static boolean isBitSet(long[] values, int i) {
        try {
            return (values[i / 64] & Bits[i % 64]) != 0;
        } catch (NullPointerException e) {
            return false;
        }
    }

    public static boolean isJavaIdentifierPart(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_PART) != 0;
        }
        return CharUtil.isJavaIdentifierPart(c);
    }

    public static boolean isJavaIdentifierPart(long complianceLevel, char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_PART) != 0;
        }
        return isJavaIdentifierPart(complianceLevel, (int)c);
    }

    public static boolean isJavaIdentifierPart(long complianceLevel, int codePoint) {
        if (Tables == null) {
            initializeTable();
        }
        switch ((codePoint & 0x1F0000) >> 16) {
            case 0:
                return isBitSet(Tables[PART_INDEX][0], codePoint & 0xFFFF);
            case 1:
                return isBitSet(Tables[PART_INDEX][1], codePoint & 0xFFFF);
            case 2:
                return isBitSet(Tables[PART_INDEX][2], codePoint & 0xFFFF);
            case 14:
                return isBitSet(Tables[PART_INDEX][3], codePoint & 0xFFFF);
        }
        // }
        // else
        // {
        // // java 7 supports Unicode 6
        // if (Tables7 == null)
        // {
        // initializeTable17();
        // }
        // switch ((codePoint & 0x1F0000) >> 16)
        // {
        // case 0 :
        // return isBitSet(Tables7[PART_INDEX][0], codePoint & 0xFFFF);
        // case 1 :
        // return isBitSet(Tables7[PART_INDEX][1], codePoint & 0xFFFF);
        // case 2 :
        // return isBitSet(Tables7[PART_INDEX][2], codePoint & 0xFFFF);
        // case 14 :
        // return isBitSet(Tables7[PART_INDEX][3], codePoint & 0xFFFF);
        // }
        // }
        return false;
    }

    public static boolean isJavaIdentifierPart(long complianceLevel, char high, char low) {
        return isJavaIdentifierPart(complianceLevel, toCodePoint(high, low));
    }

    public static boolean isJavaIdentifierStart(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_START) != 0;
        }
        return CharUtil.isJavaIdentifierStart(c);
    }

    public static boolean isJavaIdentifierStart(long complianceLevel, char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_IDENT_START) != 0;
        }
        return ScannerHelper.isJavaIdentifierStart(complianceLevel, (int)c);
    }

    public static boolean isJavaIdentifierStart(long complianceLevel, char high, char low) {
        return isJavaIdentifierStart(complianceLevel, toCodePoint(high, low));
    }

    public static boolean isJavaIdentifierStart(long complianceLevel, int codePoint) {
        // if (complianceLevel <= ClassFileConstants.JDK1_6)
        // {
        if (Tables == null) {
            initializeTable();
        }
        switch ((codePoint & 0x1F0000) >> 16) {
            case 0:
                return isBitSet(Tables[START_INDEX][0], codePoint & 0xFFFF);
            case 1:
                return isBitSet(Tables[START_INDEX][1], codePoint & 0xFFFF);
            case 2:
                return isBitSet(Tables[START_INDEX][2], codePoint & 0xFFFF);
        }
        // }
        // else
        // {
        // // java 7 supports Unicode 6
        // if (Tables7 == null)
        // {
        // initializeTable17();
        // }
        // switch ((codePoint & 0x1F0000) >> 16)
        // {
        // case 0 :
        // return isBitSet(Tables7[START_INDEX][0], codePoint & 0xFFFF);
        // case 1 :
        // return isBitSet(Tables7[START_INDEX][1], codePoint & 0xFFFF);
        // case 2 :
        // return isBitSet(Tables7[START_INDEX][2], codePoint & 0xFFFF);
        // }
        // }
        return false;
    }

    private static int toCodePoint(char high, char low) {
        return (high - Scanner.HIGH_SURROGATE_MIN_VALUE) * 0x400 + (low - Scanner.LOW_SURROGATE_MIN_VALUE) + 0x10000;
    }

    public static boolean isDigit(char c) throws InvalidInputException {
        if (c < ScannerHelper.MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_DIGIT) != 0;
        }
        if (Character.isDigit(c)) {
            throw new InvalidInputException(Scanner.INVALID_DIGIT);
        }
        return false;
    }

    public static int digit(char c, int radix) {
        if (c < ScannerHelper.MAX_OBVIOUS) {
            switch (radix) {
                case 8:
                    if (c >= 48 && c <= 55) {
                        return c - 48;
                    }
                    return -1;
                case 10:
                    if (c >= 48 && c <= 57) {
                        return c - 48;
                    }
                    return -1;
                case 16:
                    if (c >= 48 && c <= 57) {
                        return c - 48;
                    }
                    if (c >= 65 && c <= 70) {
                        return c - 65 + 10;
                    }
                    if (c >= 97 && c <= 102) {
                        return c - 97 + 10;
                    }
                    return -1;
            }
        }
        return Character.digit(c, radix);
    }

    public static int getNumericValue(char c) {
        if (c < ScannerHelper.MAX_OBVIOUS) {
            switch (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c]) {
                case C_DIGIT:
                    return c - '0';
                case C_LOWER_LETTER:
                    return 10 + c - 'a';
                case C_UPPER_LETTER:
                    return 10 + c - 'A';
            }
        }
        return CharUtil.getNumericValue(c);
    }
    public static int getHexadecimalValue(char c) {
        switch(c) {
            case '0' :
                return 0;
            case '1' :
                return 1;
            case '2' :
                return 2;
            case '3' :
                return 3;
            case '4' :
                return 4;
            case '5' :
                return 5;
            case '6' :
                return 6;
            case '7' :
                return 7;
            case '8' :
                return 8;
            case '9' :
                return 9;
            case 'A' :
            case 'a' :
                return 10;
            case 'B' :
            case 'b' :
                return 11;
            case 'C' :
            case 'c' :
                return 12;
            case 'D' :
            case 'd' :
                return 13;
            case 'E' :
            case 'e' :
                return 14;
            case 'F' :
            case 'f' :
                return 15;
            default:
                return -1;
        }
    }

    public static char toUpperCase(char c) {
        if (c < MAX_OBVIOUS) {
            if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_UPPER_LETTER) != 0) {
                return c;
            } else if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_LOWER_LETTER) != 0) {
                return (char)(c - 32);
            }
        }
        return Character.toUpperCase(c);
    }

    public static char toLowerCase(char c) {
        if (c < MAX_OBVIOUS) {
            if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_LOWER_LETTER) != 0) {
                return c;
            } else if ((ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_UPPER_LETTER) != 0) {
                return (char)(32 + c);
            }
        }
        return Character.toLowerCase(c);
    }

    public static boolean isLowerCase(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_LOWER_LETTER) != 0;
        }
        return Character.isLowerCase(c);
    }

    public static boolean isUpperCase(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_UPPER_LETTER) != 0;
        }
        return Character.isUpperCase(c);
    }

    /**
     * Include also non JLS whitespaces.
     * <p/>
     * return true if Character.isWhitespace(c) would return true
     */
    public static boolean isWhitespace(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & ScannerHelper.C_SPACE) != 0;
        }
        return CharUtil.isWhitespace(c);
    }

    public static boolean isLetter(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & (ScannerHelper.C_UPPER_LETTER | ScannerHelper.C_LOWER_LETTER)) != 0;
        }
        return Character.isLetter(c);
    }

    public static boolean isLetterOrDigit(char c) {
        if (c < MAX_OBVIOUS) {
            return (ScannerHelper.OBVIOUS_IDENT_CHAR_NATURES[c] & (ScannerHelper.C_UPPER_LETTER
                                                                   | ScannerHelper.C_LOWER_LETTER | ScannerHelper.C_DIGIT)) != 0;
        }
        return Character.isLetterOrDigit(c);
    }

}
